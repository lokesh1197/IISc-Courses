#+title: ISS Architecture Notes
#+author: Lokesh Mohanty

* Assignment 1

1. Calculate how many times this C loop will iterate. Assume that C float variables are represented using the 32 bit IEEE 754 Floating Point Standard representation.

#+begin_src C
  #include <stdio.h>

  int main() {
    int count = 0;
    float f = 1.0;
    while(f != 0.0) {
     f = f/2.0; 
     count++;
    }
    printf("Number of loops: %d", count);
  }
#+end_src

#+RESULTS:
: Number of loops: 150

2. Prove that the C shift operator <<  (>>) can be used to multiply (divide) a 32 bit unsigned int by powers of 2. Does this idea also work for 32 bit signed ints represented using 2s complement representation? If not, show a counterexample.

#+begin_src C :results verbatim
  #include <stdio.h>

  int main() {
    unsigned int u = 4;
    int sn = -4;
    int sp = 4;
    int maxp = 2147483647;
    int maxn = -2147483648;
    int maxn1 = -2147483648 + 1073741824;
    unsigned int maxu = 4294967295;

    printf("Divide by 2:\n 4(unsigned) -> %u\n 4(signed) -> %d\n -4 -> %d\n", u >> 1, sp >> 1, sn >> 1);
    printf("Divide by 8:\n 4(unsigned) -> %u\n 4(signed) -> %d\n -4 -> %d\n", u >> 3, sp >> 3, sn >> 3);
    printf("maxp: %d\n", maxp <<1);
    printf("maxn: %d\n", maxn <<1);
    printf("maxn1: %d\n", maxn1 <<1);
    printf("maxu: %u\n", maxu <<1);
  }
#+end_src

#+RESULTS:
#+begin_example
Divide by 2:
 4(unsigned) -> 2
 4(signed) -> 2
 -4 -> -2
Divide by 8:
 4(unsigned) -> 0
 4(signed) -> 0
 -4 -> -1
maxp: -2
maxn: 0
maxn1: -2147483648
maxu: 4294967294
#+end_example


#+begin_src C
  #include<stdio.h>

  int main() {
    printf("%d\n", 0b11111111111111111111111111111110);
    printf("%d", 0b11111111111111111111111111111110 << 2);
    return 0;
  }
#+end_src

#+RESULTS:
| -2 |
| -8 |

#+begin_src C :results verbatim
  #include <stdio.h>

  int main() {
    unsigned int x = 0x89ABCDEF, y = 0x76543210;
    printf("&x: %p,&y: %p\n", &x, &y);
    printf("Least significant byte of x and remaining bytes of y: %x\n", (x & 0xFF) | (y & 0xFFFFFF00));
    printf("Any bit of x equals 0: %d\n", !(x == 0xFFFFFFFF));
    /* printf("Any bit in the least significant byte of x equals 1: %d\n", (x & 0xFF == 0) ? 0 : 1); */
    printf("Any bit in the least significant byte of x equals 1: %d\n", ((x & 0xFF) && 1));
    printf("%b, %b\n", x, x % 256);

    int pi_int = 0x40490FDB;
    float *pi = &pi_int;
    float pi1 = 22.0 / 7.0;
    printf("%f", *pi);
    printf(", %f\n", pi1);
    printf("%x", *pi);
    printf(", %x\n", pi1);
    printf("%x\n", pi1);
    /* printf("%p\n", sizeof(&x)); */
    return 0;
  }
#+end_src

#+RESULTS:
: &x: 0x7fff5ae5cc20,&y: 0x7fff5ae5cc24
: Least significant byte of x and remaining bytes of y: 765432ef
: Any bit of x equals 0: 1
: Any bit in the least significant byte of x equals 1: 1
: 10001001101010111100110111101111, 11101111
: 3.141593, 3.142857
: f1dcc0b8, f1dcc0bc
: f1dcc0c1


#+begin_src C :results verbatim
  #include <stdio.h>
  #include <stdint.h>
  #include <inttypes.h>
  #include <math.h>

  int main() {
    float pi = (float)M_PI;
    float pi_approx = 22.0/7.0;
    union {
      float f;
      uint32_t u;
    } f2u = { .f = pi }, fa2u = { .f = pi_approx };

    printf("pi: %f\n  : 0x%" PRIx32 "\n", pi, f2u.u);
    printf("pi: %f\n  : 0x%" PRIx32 "\n", pi_approx, fa2u.u);
    printf("common: 0x%" PRIx32 "\n", ~(f2u.u & fa2u.u) & (f2u.u | fa2u.u));
    return 0;
  }
#+end_src

#+RESULTS:
: pi: 3.141593
:   : 0x40490fdb
: pi: 3.142857
:   : 0x40492492
: common: 0x2b49
